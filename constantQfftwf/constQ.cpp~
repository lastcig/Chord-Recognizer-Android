/**
 * @file   constQ.cpp
 * @author Taemin Cho <taemin@taemin-linux>
 * @date   Fri Nov 26 06:20:38 2010
 * 
 * @brief  Generate Constant Q spectrum from Audio segment
 * 
 * 
 */

//#include <jni.h>
#include "constQ.h"
#include <iostream>  
#include <cstring>
//#include <cstdlib>

#define ABS(x) sqrt(x.r*x.r+ x.i*x.i)
/** 
 * Constructor of ConstQ class
 * 
 * Generate sparseKernel under given parameters
 * 
 * @param _minNote : lowest pitch to analyze
 * @param _maxNote : maximum pitch to analyze
 * @param _bpo : bins per octave
 * @param _fs : sample rate
 * @param _thresh : sparseKernel thereshold
 */

ConstQ::ConstQ(int _minNote, int _maxNote, int _bpo, 
	       int _fs, float _thresh)
  :minNote(_minNote), maxNote(_maxNote),
   bpo(_bpo), fs(_fs), thresh(_thresh)
{
  isKernelUsed = false;
  genFilterBanks();
  //genSparseKernel();
}

/** 
 * Destructor 
 * 
 * clear all allocated memory 
 *
 */

ConstQ::~ConstQ()
{
  fftwf_destroy_plan(r2c);
  fftwf_free(cout);
  fftwf_free(fin);
  
  if(isKernelUsed){
    for (int k=0; k<constQBins; k++){
      fftwf_free(sparkernel[k].cpx);
    }

    delete []sparkernel;
  }else{
    for (int k=0; k<constQBins; k++){
      delete []filterbanks[k].bank;
    }

    delete []filterbanks;
  }
}

void ConstQ::genFilterBanks()
{
    // get frequencies of min and max Note
  minFreq = noteNum2Freq((double)minNote);
  maxFreq = noteNum2Freq((double)maxNote);

  // get Q value and the number of total constant Q bins
  Q = 1./(pow(2.,(1./bpo)) - 1);
  int numBanks = ceil(bpo * log(maxFreq/minFreq)/log(2));
  constQBins = numBanks;
  // memory alloc for sparkernel bins
  filterbanks = new filterBank[numBanks];

  // fftLength =
  //  nextPowerOf2((unsigned int) ceil(Q * fs/minFreq));
  fftLength = fs;

  // generate fftw plan
  cout = (fftwf_complex *) fftwf_malloc(sizeof(fftwf_complex) * fftLength);
  fin = (float *) fftwf_malloc(sizeof(float) * fftLength);
  r2c = fftwf_plan_dft_r2c_1d(fftLength, fin, cout, FFTW_ESTIMATE);

  float freqStep = (float)fs/fftLength;

  for (int k = 0; k<numBanks; k++){
    float center = minFreq * pow(2,((float)k/bpo));
    float lfreq = center * pow(2,(-1./bpo));
    float ufreq = center * pow(2,(1./bpo));
    int lowerIdx = ceil(lfreq / freqStep);
    int upperIdx = floor(ufreq / freqStep);

    filterbanks[k].s = lowerIdx - 1;
    filterbanks[k].e = upperIdx;
    int length = upperIdx - lowerIdx +1;

    filterbanks[k].bank = new float[length];

    // (log2((lowerIdx:upperIdx) * freqStep) - log2(lfreq)) / (log2(ufreq) -
    // log2(lfreq));
    float alpha = 10;
    for(int i = lowerIdx - 1; i < upperIdx; i++){
      float logfreqScale = (log(i * freqStep) - log(lfreq)) 
	             / (log(ufreq) - log(lfreq));
    
    // Gaussian window
      filterbanks[k].bank[i - lowerIdx+1] = exp(-0.5 * pow((alpha * (logfreqScale - 0.5) * 0.5 ), 2));
    }
  }
}

/** 
 * Generate sparseKernel
 * 
 * @param minNote 
 * @param maxNote 
 * @param bpo 
 * @param fs 
 * @param thresh 
 * 
 * @return 
 */

void ConstQ::genSparseKernel()
{
  // get frequencies of min and max Note
  minFreq = noteNum2Freq((float)minNote);
  maxFreq = noteNum2Freq((float)maxNote);

  // get Q value and the number of total constant Q bins
  Q = 1./(pow(2.,(1./bpo)) - 1);
  constQBins = ceil(bpo * log(maxFreq/minFreq)/log(2));
  
  // memory alloc for sparkernel bins
  sparkernel = new sparKernel[constQBins];
  
  fftLength =
    nextPowerOf2((unsigned int) ceil(Q * fs/minFreq));

  // fftw setup
  cin = (fftwf_complex *) fftwf_malloc(sizeof(fftwf_complex) * fftLength);
  memset(cin, 0, sizeof(fftwf_complex) * fftLength);
  cout = (fftwf_complex *) fftwf_malloc(sizeof(fftwf_complex) * fftLength);
  c2c = fftwf_plan_dft_1d(fftLength, cin, cout, FFTW_FORWARD, FFTW_ESTIMATE);

  fin = (float *) fftwf_malloc(sizeof(float) * fftLength);
  r2c = fftwf_plan_dft_r2c_1d(fftLength, fin, cout, FFTW_ESTIMATE);

  for (int k=constQBins; k > 0; k--){
    if((k-1)%3) continue;

    double centerFreq = (minFreq * pow(2,(float(k-1)/bpo)));

    int upperBound = ceil(centerFreq * pow(2,  1./12) * fftLength/fs);
    int lowerBound = floor(centerFreq * pow(2, -1./12) * fftLength/fs);

    sparkernel[k-1].s = lowerBound;
    sparkernel[k-1].e = upperBound;
    sparkernel[k-1].cpx = (fftwf_complex *) 
      fftwf_malloc(sizeof(fftwf_complex) * (upperBound - lowerBound));
  }

  pthread_create(&thread, 0, ConstQ::sparseKernelThread, this);

}

void *ConstQ::sparseKernelThread(void *arg)
{
  ConstQ *This = (ConstQ*) arg;

  float _fftLength = (float) This->fftLength;
  int _constQBins = This->constQBins;
  int _Q = This->Q;
  double _minFreq = This->minFreq;
  int _fs = This->fs;
  float _thresh = This->thresh;
  int _bpo = This->bpo;

  complex_t *tempKernel = (complex_t *) This->cin;

  std::complex <float> *specKernel;
  specKernel = reinterpret_cast<std::complex <float> *> (This->cout); 

  for (int k=_constQBins; k > 0; k--){
    This->progress = 1.0/_constQBins * (_constQBins - k);
    if((k-1)%3) continue;

    double centerFreq = (_minFreq * pow(2,(float(k-1)/_bpo)));
    int length = ceil(_Q * _fs / centerFreq);

    for(int n=0; n<length; n++){
      float hwin = This->hamming(n, length) / length;
      tempKernel[n].r = hwin * cos(2*M_PI*_Q*n/length);
      tempKernel[n].i = hwin * sin(2*M_PI*_Q*n/length);
    }

    fftwf_execute(This->c2c);

    int upperBound = This->sparkernel[k-1].e;
    int lowerBound = This->sparkernel[k-1].s;

    std::complex <float> *sparKernel;
    sparKernel = 
      reinterpret_cast<std::complex <float> *> (This->sparkernel[k-1].cpx);

    // cut under the threshold, Conjugate and scaling
    for(int i=lowerBound; i<upperBound; i++){
      if (abs(specKernel[i]) > _thresh)
    	sparKernel[i-lowerBound] = conj(specKernel[i] / _fftLength);
      else
    	sparKernel[i-lowerBound] = 0;
    }

  }
  
  fftwf_destroy_plan(This->c2c); // no more needed
  fftwf_free(This->cin);
  This->progress = 1.0;

  return 0;
}


/** 
 * generate Constant Q spectrum from audio segment
 * 
 * @param samples : pointer of segmented audio signal
 * @param numSample : number of audio samples in the segment
 * @param constQSpec : 
 */


void ConstQ::genConstantQspec(float *samples, 
			      int numSample, float *constQSpec)
{
  // clean input memory for zero padding 
  memset(fin, 0, fftLength * sizeof(float));
  //  std::memcpy(fin, samples, numSample * sizeof(float));  

  //  windowing
  for(int i = 0; i < numSample; i++){
    fin[i] = samples[i] * hamming(i, numSample);
  }

  // fft calculate
  fftwf_execute(r2c);

  std::complex <float> *freqData;
  freqData = 
    reinterpret_cast<std::complex <float> *> (cout);

  if (isKernelUsed){

    for(int n=0; n<constQBins; n+=3){

      std::complex <float> *kernel;
      kernel = 
	reinterpret_cast<std::complex <float> *> (sparkernel[n].cpx);

      std::complex <float> temp(0, 0);

      for(int i = sparkernel[n].s; i< sparkernel[n].e; i++){
	temp += kernel[i-sparkernel[n].s] * freqData[i];
      }

      constQSpec[n] = abs(temp);
    }
  }else{
    //std::cout << "fuck1\n" << constQBins;
    for(int n=0; n<constQBins; n+=3){
    
      for(int i = filterbanks[n].s; i< filterbanks[n].e; i++){
	constQSpec[n] += filterbanks[n].bank[i-filterbanks[n].s] * abs(freqData[i]);
      }
    }
  }

}

